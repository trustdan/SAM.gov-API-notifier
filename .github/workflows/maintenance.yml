name: Weekly Maintenance

on:
  schedule:
    # Run every Sunday at 2 AM UTC (9 PM ET Saturday)
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      cleanup_age_days:
        description: 'Age in days for cleanup (default: 30)'
        required: false
        type: number
        default: 30
      force_cleanup:
        description: 'Force cleanup even if not needed'
        required: false
        type: boolean
        default: false
      generate_report:
        description: 'Generate comprehensive maintenance report'
        required: false
        type: boolean
        default: true

env:
  GO_VERSION: '1.21'

jobs:
  maintenance:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Build maintenance tools
      run: |
        make build
        go build -o bin/maintenance ./cmd/maintenance
      
    - name: Create maintenance directories
      run: |
        mkdir -p state reports logs
        
    - name: Download previous state
      uses: actions/download-artifact@v3
      with:
        name: monitor-state
        path: state/
      continue-on-error: true
      
    - name: Download previous metrics
      uses: actions/download-artifact@v3
      with:
        name: metrics-data
        path: state/
      continue-on-error: true
      
    - name: Run state cleanup
      run: |
        echo "Running state cleanup..."
        ./bin/maintenance -task cleanup-state \
          -age-days ${{ github.event.inputs.cleanup_age_days || '30' }} \
          ${{ github.event.inputs.force_cleanup == 'true' && '-force' || '' }} \
          -v
      env:
        SAM_API_KEY: ${{ secrets.SAM_API_KEY }}
        
    - name: Validate configuration
      run: |
        echo "Validating current configuration..."
        ./bin/monitor -config config/queries.yaml -validate-env -v
      env:
        SAM_API_KEY: ${{ secrets.SAM_API_KEY }}
        SMTP_HOST: ${{ secrets.SMTP_HOST }}
        SMTP_PORT: ${{ secrets.SMTP_PORT }}
        SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
        SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
        EMAIL_TO: ${{ secrets.EMAIL_TO }}
        
    - name: Run security audit
      run: |
        echo "Running security audit..."
        ./bin/maintenance -task security-audit -v
      env:
        SAM_API_KEY: ${{ secrets.SAM_API_KEY }}
        SMTP_HOST: ${{ secrets.SMTP_HOST }}
        SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
        SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        
    - name: Generate performance report
      if: github.event.inputs.generate_report != 'false'
      run: |
        echo "Generating maintenance report..."
        ./bin/maintenance -task generate-report -output reports/maintenance-$(date +%Y%m%d).md -v
        
    - name: Optimize cache
      run: |
        echo "Optimizing cache..."
        ./bin/maintenance -task optimize-cache -v
        
    - name: Run health check
      run: |
        echo "Running health check..."
        ./bin/maintenance -task health-check -v > reports/health-$(date +%Y%m%d).txt
        
    - name: Clean old artifacts
      uses: actions/github-script@v6
      with:
        script: |
          const cutoffDate = new Date();
          cutoffDate.setDate(cutoffDate.getDate() - 90); // 90 days ago
          
          try {
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            let deletedCount = 0;
            for (const artifact of artifacts.data.artifacts) {
              const artifactDate = new Date(artifact.created_at);
              
              // Keep monitor-state and metrics-data artifacts (latest only)
              if (artifact.name === 'monitor-state' || artifact.name === 'metrics-data') {
                continue;
              }
              
              if (artifactDate < cutoffDate) {
                try {
                  await github.rest.actions.deleteArtifact({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    artifact_id: artifact.id
                  });
                  deletedCount++;
                  console.log(`Deleted old artifact: ${artifact.name} (${artifact.created_at})`);
                } catch (error) {
                  console.log(`Failed to delete artifact ${artifact.name}: ${error.message}`);
                }
              }
            }
            
            console.log(`Cleanup completed: ${deletedCount} old artifacts deleted`);
          } catch (error) {
            console.log(`Artifact cleanup failed: ${error.message}`);
          }
          
    - name: Update state artifacts
      uses: actions/upload-artifact@v3
      with:
        name: monitor-state
        path: state/
        retention-days: 90
      if: always()
      
    - name: Upload maintenance reports
      uses: actions/upload-artifact@v3
      with:
        name: maintenance-reports-${{ github.run_number }}
        path: reports/
        retention-days: 30
      if: always()
      
    - name: Upload maintenance logs
      uses: actions/upload-artifact@v3
      with:
        name: maintenance-logs-${{ github.run_number }}
        path: |
          *.log
          logs/
        retention-days: 30
      if: failure()
      
    - name: Create maintenance summary
      if: always()
      run: |
        echo "# Maintenance Summary - $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Actions Performed" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ State cleanup completed" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Configuration validation completed" >> $GITHUB_STEP_SUMMARY  
        echo "- ‚úÖ Security audit completed" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Cache optimization completed" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Health check completed" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Artifact cleanup completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "reports/health-$(date +%Y%m%d).txt" ]; then
          echo "## Health Check Results" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat "reports/health-$(date +%Y%m%d).txt" | head -20 >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üìä Detailed reports available in artifacts" >> $GITHUB_STEP_SUMMARY
        echo "üîß Next maintenance: $(date -d '+7 days' '+%Y-%m-%d')" >> $GITHUB_STEP_SUMMARY

  # Notify if maintenance fails
  notify_failure:
    runs-on: ubuntu-latest
    needs: maintenance
    if: failure()
    
    steps:
    - name: Notify maintenance failure
      run: |
        echo "‚ö†Ô∏è Weekly maintenance failed!"
        echo "Check the maintenance workflow logs for details."
        echo "Manual intervention may be required."